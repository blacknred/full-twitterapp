version: "3.7"

services:
  redis:
    container_name: redis
    build: ./redis
    env_file: ./.env.dev
    restart: always
    volumes:
      - "./redis/data:/data"
    environment:
      - REDIS_PASSWORD=${REDIS_PASSWORD:-test}
    ports:
      - "6379:6379"
    networks:
      - backend
    healthcheck:
      test: exit 0

  db:
    container_name: db
    build: ./db
    env_file: ./.env.dev
    restart: always
    volumes:
      - "./db/data:/var/lib/postgresql/data"
    environment:
      - POSTGRES_USER=${POSTGRES_USER:-test}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD:-test}
      - POSTGRES_DB=${POSTGRES_DB:-test}
    ports:
      - "5432:5432"
    networks:
      - backend
    healthcheck:
      test: exit 0

  # api:
  #   container_name: api
  #   hostname: api
  #   command: yarn dev
  #   env_file: ./.env.dev
  #   restart: always
  #   build:
  #     context: ./api
  #     target: build
  #   volumes:
  #     - "./api:/usr/src/app"
  #     - "/usr/src/app/node_modules"
  #     - "/usr/src/app/dist"
  #   environment:
  #     - NODE_ENV=development
  #     - DB_URL=postgres://${POSTGRES_USER:-test}:${POSTGRES_PASSWORD:-test}@db:5432/${POSTGRES_DB:-test}
  #     - REDIS_URL=redis://:${REDIS_PASSWORD:-test}@redis:6379/0
  #   depends_on:
  #     - db
  #     - redis
  #   ports:
  #     - "8080:3000"
  #   networks:
  #     - backend
  #     - frontend

  web:
    container_name: web
    hostname: web
    command: yarn dev
    env_file: ./.env.dev
    restart: unless-stopped
    build:
      context: ./web
      target: build
    volumes:
      - "./web:/usr/src/app"
      - "/usr/src/app/node_modules"
    environment:
      - API_URL=${API_URL:-http://localhost:8080/api/v1/}
      - NODE_OPTIONS=--openssl-legacy-provider
      - SKIP_PREFLIGHT_CHECK=true
      - CHOKIDAR_USEPOLLING=true
    ports:
      - "3000:3000"
    networks:
      - frontend

networks:
  backend:
    driver: bridge
  frontend:
    name: infrastructure
