version: "3.7"

services:
  rabbitmq:
    container_name: rabbitmq
    build: ./rabbitmq
    env_file: ./.env.dev
    restart: always
    volumes:
      - "./rabbitmq/data:/var/lib/rabbitmq"
    environment:
      - RABBITMQ_USER=${RABBITMQ_USER:-test}
      - RABBITMQ_PASSWORD=${RABBITMQ_PASSWORD:-test}
    ports:
      - "5672:5672"
      - "15672:15672"
    networks:
      - backend
    healthcheck:
      test: exit 0

  redis:
    container_name: redis
    build: ./redis
    env_file: ./.env.dev
    restart: always
    volumes:
      - "./redis/data:/data"
    environment:
      - REDIS_PASSWORD=${REDIS_PASSWORD:-test}
    ports:
      - "6379:6379"
      - "8001:8001"
    networks:
      - backend
    healthcheck:
      test: exit 0

  mongodb:
    container_name: mongodb
    build: ./mongodb
    env_file: ./.env.dev
    restart: always
    volumes:
      - "./mongodb/data:/data/db"
    environment:
      - AUTH=yes
      - MONGO_USER=${MONGO_USER:-test}
      - MONGO_PASSWORD=${MONGO_PASSWORD:-test}
      - MONGO_DB=${MONGO_DB:-test}
    ports:
      - "27017:27017"
    networks:
      - backend
    healthcheck:
      test: exit 0

  api:
    container_name: api
    hostname: api
    command: [ sh, -c, "yarn run docs && yarn start:dev" ]
    env_file: ./.env.dev
    restart: always
    build:
      context: ./api
      target: build
    volumes:
      - "./api:/usr/src/app"
      - "/usr/src/app/node_modules"
      - "/usr/src/app/dist"
    environment:
      - NODE_ENV=development
      - REDIS_URL=redis://:${REDIS_PASSWORD:-test}@redis:6379
      - MONGODB_URL=mongodb://${MONGO_USER:-test}:${MONGO_PASSWORD:-test}@db:27017/${MONGO_DB:-test}
      - RABBITMQ_URL=amqp://${RABBITMQ_USER:-test}:${RABBITMQ_PASSWORD:-test}@rabbitmq:5672
    depends_on:
      - redis
      - mongodb
      - rabbitmq
    ports:
      - "8080:3000"
    networks:
      - backend

  web:
    container_name: web
    hostname: web
    command: yarn dev
    env_file: ./.env.dev
    restart: unless-stopped
    build:
      context: ./web
      target: build
    volumes:
      - "./web:/usr/src/app"
      - "/usr/src/app/node_modules"
    environment:
      - NODE_OPTIONS=--openssl-legacy-provider
      - SKIP_PREFLIGHT_CHECK=true
      - CHOKIDAR_USEPOLLING=true
      # - NEXT_PUBLIC_BE_ORIGIN=${BE_ORIGIN:-http://localhost:8080}
    ports:
      - "3000:3000"
    networks:
      - frontend

  proxy:
    container_name: proxy
    hostname: proxy
    image: nginx:stable-alpine
    command: [nginx-debug, '-g', 'daemon off;']
    env_file: ./.env
    restart: always
    volumes:
      - "./nginx/etc/dev.service.conf:/etc/nginx/conf.d/service.conf:ro"
    environment:
      - NGINX_ENTRYPOINT_QUIET_LOGS=1
    depends_on:
      - api
      - web
    ports:
      - "80:80"
    networks:
      - backend
      - frontend

networks:
  backend:
    driver: bridge
  frontend:
    name: infrastructure
